version: "3.7"
services:

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    volumes:
      - .:/src
      - venv:/root/.local/share
    environment:
      # Change before deployment
      ADMIN_USERNAME: "admin"
      ADMIN_PASSWORD: "password"
      ADMIN_EMAIL: "admin@example.com"
      CELERY_BROKER_URL: "amqp://doccano:doccano@rabbitmq"
      DATABASE_URL: "postgres://doccano:doccano@postgres:5432/doccano?sslmode=disable"
      ALLOW_SIGNUP: "False"
      DEBUG: "True"
    ports:
      - 8000:8000
    depends_on:
      - postgres
    networks:
      - network-backend
      - network-frontend

  celery:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    volumes:
      - .:/src
      - venv:/root/.local/share
    entrypoint: ["/src/tools/dev-celery.sh"]
    environment:
      PYTHONUNBUFFERED: "1"
      CELERY_BROKER_URL: "amqp://doccano:doccano@rabbitmq"
      DATABASE_URL: "postgres://doccano:doccano@postgres:5432/doccano?sslmode=disable"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - network-backend

  rabbitmq:
    # Update to alpine variation | Uses Alpine 3.14
    image: rabbitmq:3.8-alpine
    environment:
      RABBITMQ_DEFAULT_USER: "doccano"
      RABBITMQ_DEFAULT_PASS: "doccano"
    ports:
      - 5672:5672
    networks:
      - network-backend

  frontend:
    # Updated from 13.7.0 -> 16.5-alpine3.14 | Keeps alpine version consistent where possible
    image: node:16.5-alpine3.14
    command: ["/src/tools/dev-nuxt.sh"]
    working_dir: /src/frontend
    environment:
      API_URL: "http://backend:8000"
    volumes:
      - .:/src
      - node_modules:/src/frontend/node_modules
    ports:
      - 3000:3000
    depends_on:
      - backend
    networks:
      - network-frontend

  postgres:
    # Update image 13.1-alpine --> 13.3-alpine | Uses Alpine 3.14
    image: postgres:13.3-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: "doccano"
      POSTGRES_PASSWORD: "doccano"
      POSTGRES_DB: "doccano"
    networks:
      - network-backend

volumes:
  postgres_data:
  node_modules:
  venv:

networks:
  network-backend:
  network-frontend:
